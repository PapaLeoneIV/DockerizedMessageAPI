// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO students (
  id, name, subject, body, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, subject, body, created_at, updated_at
`

type CreateProductParams struct {
	Id 	  	  int32
	Name      string
	Subject   string
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Id,
		arg.Name,
		arg.Subject,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subject,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM students
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getLastIdx = `-- name: GetLastIdx :one
SELECT id FROM students
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastIdx(ctx context.Context) (int32, error) {
	var lastId int32
	query := `SELECT COALESCE(MAX(id), 0) FROM students`
	err := q.db.QueryRowContext(ctx, query).Scan(&lastId)
	return lastId, err

}

const getProduct = `-- name: GetProduct :one
SELECT id, name, subject, body, created_at, updated_at FROM students 
WHERE id=$1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subject,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, subject, body, created_at, updated_at FROM students
`

func (q *Queries) GetProducts(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subject,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE students SET name=$1, subject=$2, body=$3, created_at=$4, updated_at=$5 
WHERE id=$6
`

type UpdateProductParams struct {
	Name      string
	Subject   string
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Subject,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
